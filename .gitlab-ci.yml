stages:
  - Analysis
  - Targeted Code Coverage
  - All Code Coverage
  - Sanitizers

variables:
  CTEST_OUTPUT_ON_FAILURE: "1"

# Analysis

cmake-format Check:
  image: stabletec/build-core:fedora
  stage: Analysis
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  allow_failure: true
  script:
    - dnf install -y python3-pip
    - pip install cmake-format
    - cmake-format --version
    - cmake-format -i $(find . -name "*.cmake")
    - cmake-format -i $(find . -name "CMakeLists.txt")
    - git diff --exit-code

clang-format Check:
  image: stabletec/build-core:fedora
  stage: Analysis
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  allow_failure: true
  script:
    - clang-format --version
    - clang-format -i $(find . -name "*.c")
    - clang-format -i $(find . -name "*.cpp")
    - clang-format -i $(find . -name "*.h")
    - clang-format -i $(find . -name "*.hpp")
    - git diff --exit-code

# Targeted Code Coverage

Linux/Targeted CC GCC Static:
  image: stabletec/build-core:fedora
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov

Linux/Targeted CC GCC Shared:
  image: stabletec/build-core:fedora
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov

Linux/Targeted CC Clang Static:
  image: stabletec/build-core:fedora
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

Linux/Targeted CC Clang Shared:
  image: stabletec/build-core:fedora
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

macOS/Targeted CC AppleClang Static:
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

macOS/Targeted CC AppleClang Shared:
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  variables:
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

macOS/Targeted CC Clang Static:
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

macOS/Targeted CC Clang Shared:
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

Windows/Targeted CC Clang Static:
  image: stabletec/build-core:windows-2019
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64]
  tags:
    - container
    - windows
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

Windows/Targeted CC Clang Shared:
  image: stabletec/build-core:windows-2019
  stage: Targeted Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64]
  tags:
    - container
    - windows
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-target/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-report

# All Code Coverage

Linux/All CC GCC Static:
  image: stabletec/build-core:fedora
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all

Linux/All CC GCC Shared:
  image: stabletec/build-core:fedora
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all

Linux/All CC Clang Static:
  image: stabletec/build-core:fedora
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

Linux/All CC Clang Shared:
  image: stabletec/build-core:fedora
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

macOS/All CC AppleClang Static:
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

macOS/All CC AppleClang Shared:
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  variables:
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

macOS/All CC Clang Static:
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

macOS/All CC Clang Shared:
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

Windows/All CC Clang Static:
  image: stabletec/build-core:windows-2019
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64]
  tags:
    - container
    - windows
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

Windows/All CC Clang Shared:
  image: stabletec/build-core:windows-2019
  stage: All Code Coverage
  parallel:
    matrix:
      - ARCH: [amd64]
  tags:
    - container
    - windows
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  script:
    - cmake example/code-coverage-all/ -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report

# Sanitizers

.linux_success_template: &linux_success_template
  stage: Sanitizers
  image: stabletec/build-core:fedora
  parallel:
    matrix:
      - ARCH: [amd64, arm64]
  tags:
    - container
    - linux
    - ${ARCH}
  script:
    - cmake example/all -B build -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build test

.linux_failure_template: &linux_failure_template
  stage: Sanitizers
  image: stabletec/build-core:fedora
  parallel:
    matrix:
      - ARCH: [amd64, arm64]
  tags:
    - container
    - linux
    - ${ARCH}
  script:
    - cmake example/all -B build -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja -C build
    - "! ninja -C build test"

Linux/Static Analysis:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DCLANG_TIDY=ON -DCPPCHECK=ON
  <<: *linux_success_template

Linux/GCC/ThreadSanitizer:
  variables:
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=thread
  <<: *linux_failure_template

Linux/Clang/ThreadSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=thread
  <<: *linux_failure_template

Linux/GCC/AddressSanitizer:
  variables:
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=address
  <<: *linux_failure_template

Linux/Clang/AddressSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=address
  <<: *linux_failure_template

Linux/GCC/LeakSanitizer:
  variables:
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=leak
  <<: *linux_failure_template

Linux/Clang/LeakSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=leak
  <<: *linux_failure_template

Linux/Clang/MemorySanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=memory
  <<: *linux_failure_template

Linux/GCC/UndefinedSanitizer:
  variables:
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=undefined
  <<: *linux_success_template

Linux/Clang/UndefinedSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=undefined
  <<: *linux_success_template

.macos_success_template: &macos_success_template
  stage: Sanitizers
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  script:
    - cmake example/all -B build -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build test

.macos_failure_template: &macos_failure_template
  stage: Sanitizers
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  script:
    - cmake example/all -B build -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja -C build
    - "! ninja -C build test"

macOS/AppleClang/ThreadSanitizer:
  variables:
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=thread
  <<: *macos_failure_template

macOS/Clang/ThreadSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=thread
  <<: *macos_failure_template

macOS/AppleClang/AddressSanitizer:
  variables:
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=address
  <<: *macos_failure_template

macOS/Clang/AddressSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=address
  <<: *macos_failure_template

macOS/Clang/LeakSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=leak
  <<: *macos_failure_template

macOS/AppleClang/UndefinedSanitizer:
  variables:
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=undefined
  <<: *macos_success_template

macOS/Clang/UndefinedSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D EXAMPLE_USE_SANITIZER=undefined
  <<: *macos_success_template

Windows/MSVC/Address Sanitizer:
  image: stabletec/build-core:windows-2019
  stage: Sanitizers
  parallel:
    matrix:
      - ARCH: [amd64]
  tags:
    - container
    - windows
    - ${ARCH}
  script:
    - cmake example/all/ -B build -GNinja -D EXAMPLE_USE_SANITIZER=address
    - ninja -C build
    - ninja -C build test ; if ($? -ne 0) { return 0 } else { return 1 }

# Legacy Sanitizer

Linux/GCC/ThreadSanitizer (LEGACY):
  variables:
    CMAKE_OPTIONS: -D USE_SANITIZER=thread
  <<: *linux_failure_template

Linux/Clang/ThreadSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=thread
  <<: *linux_failure_template

Linux/GCC/AddressSanitizer (LEGACY):
  variables:
    CMAKE_OPTIONS: -D USE_SANITIZER=address
  <<: *linux_failure_template

Linux/Clang/AddressSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=address
  <<: *linux_failure_template

Linux/GCC/LeakSanitizer (LEGACY):
  variables:
    CMAKE_OPTIONS: -D USE_SANITIZER=leak
  <<: *linux_failure_template

Linux/Clang/LeakSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=leak
  <<: *linux_failure_template

Linux/Clang/MemorySanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=memory
  <<: *linux_failure_template

Linux/GCC/UndefinedSanitizer (LEGACY):
  variables:
    CMAKE_OPTIONS: -D USE_SANITIZER=undefined
  <<: *linux_success_template

Linux/Clang/UndefinedSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=undefined
  <<: *linux_success_template

Windows/MSVC/Address Sanitizer (LEGACY):
  image: stabletec/build-core:windows-2019
  stage: Sanitizers
  parallel:
    matrix:
      - ARCH: [amd64]
  tags:
    - container
    - windows
    - ${ARCH}
  script:
    - cmake example/all/ -B build -GNinja -D USE_SANITIZER=address
    - ninja -C build
    - ninja -C build test ; if ($? -ne 0) { return 0 } else { return 1 }

macOS/AppleClang/ThreadSanitizer (LEGACY):
  variables:
    CMAKE_OPTIONS: -D USE_SANITIZER=thread
  <<: *macos_failure_template

macOS/Clang/ThreadSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=thread
  <<: *macos_failure_template

macOS/AppleClang/AddressSanitizer (LEGACY):
  variables:
    CMAKE_OPTIONS: -D USE_SANITIZER=address
  <<: *macos_failure_template

macOS/Clang/AddressSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=address
  <<: *macos_failure_template

macOS/Clang/LeakSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=leak
  <<: *macos_failure_template

macOS/AppleClang/UndefinedSanitizer (LEGACY):
  variables:
    CMAKE_OPTIONS: -D USE_SANITIZER=undefined
  <<: *macos_success_template

macOS/Clang/UndefinedSanitizer (LEGACY):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=undefined
  <<: *macos_success_template
